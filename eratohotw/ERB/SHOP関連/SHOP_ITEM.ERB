;----------------------------------------------------------------------
;SHOPの通信販売
;----------------------------------------------------------------------
@ITEM_BUY(ARG)
#DIM LCOUNT
#DIMS TYPE
#DIM SELECT_ITEM
#DIM ループ
;冒頭の↓は挙動確認用っぽかったので無くていい
;PRINTFORML {ITEMSALES:62}
;購入条件設定
FOR LOCAL, 0, 1000
	CALL ITEMDATA(LOCAL, "SALES")
	ITEMSALES:LOCAL = RESULT
NEXT
IF !ループ
	DRAWLINE
	CALL LIST_ITEM("全て")
ENDIF
DRAWLINE
;とりあえず無条件に全部表示にしたがTYPE指定も可能
PRINTFORML Please select items to purchase. Money: %金額表示(MONEY)%
DRAWLINE
CALL SHOW_SHOPPING("通信販売", TYPE)
LCOUNT = RESULT
DRAWLINE
PRINTL [990] - Display all　　[991] - Training Items　[992] - Consumables　[993] - Daily Necessities　[994] - Food　[995] - Drink　[996] - Body
PRINT [999] - Return
INPUT

;戻る
IF RESULT == 999
	ループ = 0
	RETURN
ELSEIF INRANGE(RESULT, 990, 996)
	SELECTCASE RESULT
	CASE 990
		TYPE = 
	CASE 991
		TYPE = 調教
	CASE 992
		TYPE = 消耗品
	CASE 993
		TYPE = 日用品
	CASE 994
		TYPE = 食材
	CASE 995
		TYPE = お酒
	CASE 996
		TYPE = 素質
	ENDSELECT
ELSEIF INRANGE(RESULT, 0, 1000)
	SELECT_ITEM = RESULT
	SELECTCASE ITEMSTOCK(SELECT_ITEM)
	CASE 1, 4
		PRINTW Incorrect input
	CASE 2
		PRINTW Out of stock.
	CASE 3
		PRINTW Not enough money.
	CASE 5
		PRINTW Cannot carry any more.
	CASEELSE
		CALL ITEMDATA(SELECT_ITEM, "購入")
		ループ = 0
		RESTART
	ENDSELECT
	LCOUNT ++
ENDIF
ループ = 1
CLEARLINE 7 + LCOUNT
RESTART

;----------------------------------------------------------------------
;基本のお店メニュー
;----------------------------------------------------------------------
@SHOW_SHOPPING(販売店, TYPE, 割引)
#DIMS 販売店
#DIMS TYPE
#DIM 割引
#DIM 表示数
#DIM 表示行
#DIM 値段
表示数 = 0
表示行 = 0
FOR LOCAL, 0 , 1000
	CALL ITEMDATA(LOCAL, "SHOP:" + 販売店)
	IF RESULT
		IF TYPE != ""
			CALL ITEMDATA(LOCAL, "TYPE:" + TYPE)
		ELSE
			RESULT = 1
		ENDIF
		IF RESULT
			値段 = ITEMPRICE:LOCAL * (100 - 割引) / 100
			SELECTCASE ITEMSTOCK(LOCAL, 値段)
			CASE 1
				LOCALS:1 = Unavail.
				CONTINUE
			CASE 2
				LOCALS:1 = Sold-out
				SETCOLOR C_GRAY
			CASE 3
				LOCALS:1 = %金額表示(値段)%
				SETCOLOR C_GRAY
			CASE 4
				LOCALS:1 = Sealed
				CONTINUE
			CASE 5
				LOCALS:1 = Full
				SETCOLOR C_GRAY
			CASEELSE
				LOCALS:1 = %金額表示(値段)%
			ENDSELECT
			LOCALS = [{LOCAL,2}]%ITEMNAME_TR(LOCAL)%
			PRINTFORM %LOCALS, 32, LEFT% %LOCALS:1, 8% 
			RESETCOLOR
			表示数 ++
			IF 表示数 % 3 == 0
				PRINTL 
				表示行 ++
			ENDIF
		ENDIF
	ENDIF
NEXT
IF 表示数 % 3 != 0
	PRINTL 
	表示行 ++
ENDIF
RETURN 表示行

;---------------------------------------------------------------------
;ITEM所持数リスト表示関数
;---------------------------------------------------------------------
@LIST_ITEM(TYPE = "全て")
#DIMS TYPE
#DIM 表示数
;custom code
#DIM PADDING = 32 ;tweak if necessary in translated, make sure to merge logging branch afterwards

SELECTCASE TYPE
CASE "全て"
	CALL LIST_ITEM("調教")
	CALL LIST_ITEM("日用品")
	CALL LIST_ITEM("素質")
	CALL LIST_ITEM("体質変化")
	CALL LIST_ITEM("調合物")
	CALL LIST_ITEM("弾幕")
	CALL LIST_ITEM("消耗品")
	CALL LIST_ITEM("お酒")
	CALL LIST_ITEM("食材")
	CALL LIST_ITEM("野菜")
	CALL LIST_ITEM("お肉")
	CALL LIST_ITEM("チョコ")
	CALL LIST_ITEM("回復")
	CALL LIST_ITEM("園芸用品")
	CALL LIST_ITEM("素材")
	CALL LIST_ITEM("衣装")
	CALL LIST_ITEM("書物")
	CALL LIST_ITEM("特殊")
	CALL LIST_ITEM("その他")
	
	;logging custom code, show current stock of lumber
	CALL LIST_ITEM("製材")
;logging custom code
CASE "製材"
	;logging custom code, show current stock of lumber
	表示数 = 0
	FOR LOCAL, 1, 50
		IF LOG_SALES:LOCAL
			PRINTFORM %@"%WOOD_NAME(LOCAL)%({LOG_SALES:LOCAL})", PADDING, LEFT%
			表示数 ++
			SIF 表示数 % 4 == 0
				PRINTL 
		ENDIF
	NEXT
	SIF 表示数 % 4 != 0
		PRINTL 
CASEELSE
	;全部回す
	表示数 = 0
	FOR LOCAL, 0, 1000
		CALL ITEMDATA(LOCAL, "TYPE:" + TYPE)
		IF RESULT && ITEM:LOCAL
			;custom code, formatting printing
			LOCALS = %ITEMNAME_TR(LOCAL)%({ITEM:LOCAL})
			IF STRLENS(LOCALS) > PADDING
				IF 表示数 % 3 == 0 && 表示数 % 4 != 0
					表示数 ++
					PRINTL
				ENDIF
				PRINTFORM %@"%ITEMNAME_TR(LOCAL)%({ITEM:LOCAL})", PADDING*2, LEFT%
				;SIF 表示数 % 4 != 0
					表示数 ++
			ELSE
				PRINTFORM %LOCALS, PADDING, LEFT%
			ENDIF
			;-----------
			表示数 ++
			SIF 表示数 % 4 == 0
				PRINTL 
		ENDIF
	NEXT
	SIF 表示数 % 4 != 0
		PRINTL 
ENDSELECT

;----------------------------------------------------------------------
;買う前に最終チェックをするもの
;ITEMDATAから呼ばれる
;購入後どうなるかはアイテム次第（主に素質）
;----------------------------------------------------------------------
@SHOP_ASK(ARG, 割引)
#DIM 割引
#DIM price
;Qol Custom code, prints descriptions of items
CALL PRINT_ITEM_DESC(ARG)

PRINTFORML Purchase %ITEMNAME_TR(ARG)%?
CALL ASK_YN
IF !RESULT
	IF ITEMPRICE:ARG * (100 - 割引) / 100 <= MONEY
		price = ITEMPRICE:ARG * (100 - 割引) / 100
		MONEY -= price
		PRINTFORMW Bought %ITEMNAME_TR(ARG)% for %金額表示(price)%.
	ELSE
		PRINTFORMW Not enough money...
		RETURN 2
	ENDIF
ENDIF
RETURN RESULT

;--------------------------------------------------------------
;アイテムまとめ買い関数
;任意の個数で購入できるものはこれ
;うどんちゃんからまとめ買いしたかったので独立関数化
;必ず先に@ITEMSTOCKで判定して購入可能なアイテムのみで呼び出すこと
;単体購入専用だろうがまとめ買い可能だろうが購入可不可の判定は必要なので先に共通で行って下さい
;ARG：購入対象アイテム
;買ったら値段を返す
;--------------------------------------------------------------
@ITEM_MATOMEGAI(ARG, 割引)
#DIM 割引
#DIM 値段
;Qol Custom code, prints descriptions of items
CALL PRINT_ITEM_DESC(ARG)

PRINTFORM Please select the desired number of %ITEMNAME_TR(ARG)% to purchase. (Stock: {ITEMSALES:ARG}　Owned: {ITEM:ARG})
PRINTL 
値段 = ITEMPRICE:ARG * (100 - 割引) / 100
;金欠、アイテム数の超過はあとで合わせる
SIF ITEMSALES:ARG
	PRINTL [ 1] １　　
SIF MIN(ITEMSALES:ARG, 所持数制限 - ITEM:ARG) >= 5
	PRINTL [ 5] ５　　
SIF MIN(ITEMSALES:ARG, 所持数制限 - ITEM:ARG) >= 10
	PRINTL [10] １０　
SIF MIN(ITEMSALES:ARG, 所持数制限 - ITEM:ARG) >= 20
	PRINTL [20] ２０　
SIF MIN(ITEMSALES:ARG, 所持数制限 - ITEM:ARG) >= 50
	PRINTL [50] ５０　
PRINTFORML [{MIN(ITEMSALES:ARG, 所持数制限 - ITEM:ARG), 2}] As many as possible
PRINTL [ 0] Cancel
INPUT
IF INRANGE(RESULT, 1, ITEMSALES:ARG)
	IF 値段 * RESULT > MONEY
		PRINTFORMW Not enough money...
		RETURN 0
	ELSEIF ITEM:ARG + RESULT > 所持数制限
		PRINTFORMW Can't buy that many!
		RETURN 0
	ENDIF
	MONEY -= 値段 * RESULT
	ITEMSALES:ARG -= RESULT
	ITEM:ARG += RESULT
	PRINTFORMW Bought {RESULT} %ITEMNAME_TR(ARG)% for %金額表示(値段 * RESULT)%
	RETURN 値段
ENDIF
RETURN 0

;----------------------------------------------------------------------
;アイテムをカートンで買う関数
;購入数が固定のものはこれ,
;1個でも最終チェックを飛ばして買うのに使う
;ARG：購入対象アイテム
;カートン商品は所持数制限を超えた場合でも余剰分を省いて購入できる
;品物を購入すると値段を返す、なんやかんやで買ってないと0
;----------------------------------------------------------------------
@ITEM_CARTON(ARG, 値段, 個数, 割引)
#DIM 個数
#DIM 値段
#DIM 割引
IF !個数
	個数 = 1
ELSEIF ITEM:ARG + 個数 > 所持数制限
	個数 = 所持数制限 - ITEM:ARG
ENDIF
SIF !値段
	値段 = ITEMPRICE:ARG * 個数
値段 = 値段 * (100 - 割引) / 100

IF 値段 > MONEY
	PRINTW Not enough money...
ELSEIF ITEMSALES:ARG == -1
	PRINTW Out of stock
ELSEIF ITEM:ARG >= 所持数制限
	PRINTW Can't hold any more
ELSE
	MONEY -= 値段
	ITEMSALES:ARG -= 個数
	ITEM:ARG += 個数
	PRINTFORMW Bought {個数} %ITEMNAME_TR(ARG)% for %金額表示(値段)%
	RETURN 値段
ENDIF
RETURN 0

;----------------------------------------------------------------------
;説明文付きのアイテム陳列
;----------------------------------------------------------------------
@ITEM_SHOPPING(ARG, 説明文, 割引)
#DIMS 説明文
#DIM 割引
#DIM 値段
値段 = ITEMPRICE:ARG * (100 - 割引) / 100
;在庫確認
CALL ITEMDATA(ARG, "SALES")
ITEMSALES:ARG = RESULT
LOCALS = ￥{値段}
IF RESULT <= 0
	SETCOLOR C_GRAY
	LOCALS = 売り切れ
ENDIF
SIF 値段 > MONEY
	SETCOLOR C_GRAY
IF ITEM:ARG >= 所持数制限
	SETCOLOR C_GRAY
	LOCALS = 持てない
ENDIF
LOCALS = [{ARG, 3}] %ITEMNAME_TR(ARG), 25, LEFT% %金額表示(値段)%

;LOCALS = [{ARG, 3}] %ITEMNAME:ARG, 22, LEFT% %LOCALS%

PRINTFORML %LOCALS, 48, LEFT%%説明文%
RESETCOLOR

;----------------------------------------------------------------------
;カートン商品等の特殊なアイテム陳列
;----------------------------------------------------------------------
@EX_SHOPPING(ARG, 商品名, 説明文, 値段, 個数, 表示番号)
#DIMS 商品名
#DIMS 説明文
#DIM 割引
#DIM 値段
#DIM 個数
#DIM 表示番号
SIF !値段
	値段 = ITEMPRICE:ARG * 個数
SIF !表示番号
	表示番号 = ARG
LOCALS = [{表示番号, 3}] %商品名, 25, LEFT% %金額表示(値段)%
CALL ITEMDATA(ARG, "SALES")
ITEMSALES:ARG = RESULT
SIF RESULT <= 0
	SETCOLOR C_GRAY
SIF 値段 > MONEY
	SETCOLOR C_GRAY
SIF ITEM:ARG >= 所持数制限
	SETCOLOR C_GRAY
PRINTFORML %LOCALS,48,LEFT%%説明文%
RESETCOLOR

;------------------------------------------------------------------------
;一日の終わりの在庫補充
;	安物食材は+10、お店には最大で20が保管されます
;	上質食材は+7、お店の最大在庫は15です
;	高級食材は+5、お店の最大在庫は10です
;----------------------------------------------------------------------
@EVENTTURNEND
#PRI
CALL お店に入荷(GETNUM(ITEM, "安物食材"), 10, 20)
CALL お店に入荷(GETNUM(ITEM, "上質食材"), 7, 15)
CALL お店に入荷(GETNUM(ITEM, "高級食材"), 5, 10)
CALL お店に入荷(GETNUM(ITEM, "甘味材"), 5, 10)
CALL お店に入荷(GETNUM(ITEM, "獣肉"), 5, 10)
CALL お店に入荷(GETNUM(ITEM, "鳥肉"), 5, 10)
;酒屋は独自に入荷
CALL 酒屋の在庫

CALL お店に入荷(GETNUM(ITEM, "こやし"), 1, 3)
; 苗は1種1日1つ入荷、最大在庫も3です
;	苗を粗末にするとゆうかりんに怒られますよ？
FOR LOCAL, 0, 1000
	IF STRCOUNT(ITEMNAME:LOCAL, "の苗")
		CALL お店に入荷(LOCAL, 1, 3)
	ELSE
		;ついでに八百屋,入荷しないこともある
		CALL ITEMDATA(LOCAL, "SHOP:八百屋")
		SIF RESULT
			CALL お店に入荷(LOCAL, RAND:2, 5)
	ENDIF
NEXT


; RETURN 1 してはいけません

;----------------------------------------------------------------------
; お店に入荷 関数
;	EVENTTURNENDでの入荷と 酒屋での売却の時に使う
;----------------------------------------------------------------------
@お店に入荷(ARG, 入荷量, 最大在庫)
#DIM 入荷量
#DIM 最大在庫
SELECTCASE ITEMSALES:ARG
CASE IS >= 最大在庫
	; 過剰在庫のときは在庫入荷しない
CASE -1, 0
	ITEMSALES:ARG = 入荷量
CASEELSE
	ITEMSALES:ARG = MIN(ITEMSALES:ARG + 入荷量, 最大在庫)
ENDSELECT
